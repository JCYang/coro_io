Implementation challenge of operations with timeout

Some of you(the users) might find that the implementation for operations with timeout are way too heavy(especially considering the shared_ptr for 
JobCoordinator). But this is a necessary detail to ensure the correctness of the codes.

Why the JobCoordinator need to be on the heap and shared?
You might think that either operation complete or timeout cancel the other will render the codes safe, unfortunately that's not the case.
The cancel() semantic provided by boost::asio guarantee only "Cancel the operation that hasn't entered the completion queues of the corresponding io_service",
but "the already queued completion/timeout handler will still be invoke sometime in the future, at least you abandon the whole queue altogether".

So if we do place the JobCoordinator within the coroutine frame,  when either side of the job(be it completed or timeout),  cancel() an already queued 
counterpart, it will introduce a possible UB. When the handler of the not-yet-effectively-canceled counterpart run, the reference to JobCoordinator may 
be dangling, because the coroutine frame may already have been destroyed.

That's why we need somewhere else to store the JobCoordinator to ensure no UB/crash. Because it should be shared by both completion/timeout handler, 
that's why shared_ptr must be used in this scenario.

Two ways to solve this problem:
	1. Need to change the semantic of cancel() in boost::asio(I doubt if it's feasible and with easy way to implement)
	2. Need to change the point of destroy semantic of coroutines. Need a new shared data infrastructure for coroutines-ts as brought up here.
	https://github.com/GorNishanov/coroutines-ts/issues/20